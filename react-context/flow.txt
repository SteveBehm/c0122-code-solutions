
USER CAN SIGN IN
*client*
  the constructor method runs first to pull any props into the program

  the state is set with no user and isAuthorizing to be true

  then the render method runs once and returns null since isAuthorizing is currently true

  componentDidMount runs and we see if a hashchange has occurred but it hasn'table
  then we try to look for a token, however there won't in case the user has
  already signed in and refreshed the page.
  Since we are currently signing in we have no token yetbe one yet

  the user is still null and then the state is set to isAuthorizing: false
  because now we have checked for the token
  isAuthorizing lets us know if we have checked for a token or not

  now that the isAuthorizing is false the render method will evaluate differently
  we set the contextValue to include user, route, handleSignIn, and handleSignOut
  then in the return statement we use a content.Provider so we can use those props
  throughout our compared

  the renderPage method is called within the render method and the program needs
  to determine what page to render

  if the route ("path") is empty we go to the home page and
  if the route is sign-in or sign-up we go to the authorization page

  in this case we need to go to the Auth.jsx to see what happens next
  in the AuthPage class we first look to see if we have a user, but we don't
  and that mean the return is called and specifically AuthForm the key, action, and onSignIn properties

  on auth-form the constructor runs followed by the render method once to show
  the sign in form with the 2 input a link and a button and we wait to see what
  the user does

  the user will trigger the handleChange method when they begin typing the username
  or the password into those inputs. Each letter triggers a re-render because the state
  will change as the value of the username and password changes

  when the user clicks submit the handleSubmit method runs which will begin
  the programs interaction with the backend.
  handleSubmit sends a post request via fetch to the database with our users username and password

  on the back end our program is listening for sign-in post requests
  if there isn't a username and password it will throw and errorif there is both
  then the program queries the database with the intention to compare the users
  stored hashedPassword with the one they just typed
  if they are a match then we send the user info from the database back to the server
  and a fresh token that has been signed
  this will trigger the onSignIn function to be called, which is a prop of the
  AuthForm call in the AuthPage class and the value is handleSignIn
  that means we are actually calling the handleSignIn method on the app.jsx

  now the user and token is there and the state is set so the user value is user
  which triggers a re-render and isAuthorizing is still false
  this means that the renderPage method is called

  the renderPage method checks the route which is now and empty string
  this causes the home class to be called taking us to home.jsx
  the Home class checks to make sure it is the user and not a falsy value
  since we have an actual user the page renders showing us what we all
  wanted to see.



USER CAN SIGN UP

*client*
  the constructor method runs first to pull any props into the program

  the state is set

  then the render method runs once

  the user clicks register now link

  this causes the alternateActionHref, alternateActionText,
  and submit button/link to change to allow a user to register or
  return to sign in

  the user types in a username and password

  typing in the username triggers the handleChange method and changes
  the state to reflect the new username value
  the render method is called after each change in state to show the
  username being typed

  typing in the password also triggers the handleChange method and changes
  the state to reflect the new password value
  the render method is called and the password is shown

  the user clicks the sumbit button, which submits the form and triggers
  the handleSubmit method, which passes the event prop

  a request is formed with the body in JSON format and the
  content-type application/json

  the request is sent to the server via fetch with the new username and password
  using a specific api depending on if the action was register or sign in

  the request asks for a JSON response

  the client is told that if the promise if fulfilled to convert the response to JSON

  if the promise returned is fulfilled then we need to see if the action was 'sign up'
  and if it is sign up we need to switch to the sign-in view using the window.location.hash
  so the person can sign in

  see the sign in feature for the next steps

*Server*
  in index.js the post method for signing in is called
  if there is no username or password an error is thrown
  if there is a username and password
  argon2 is called to hash the password and then store the usename and hashed
  password in the sql database into the users table
  the username, userId and createdAt is returned to the client in a json format

USER CAN SIGN Out
*client*
  the user clicks the sign out link in the navbar which will trigger the handleSignOut
  method in the app.jsx module on the server side
  this method will remove the react-context-jwt from the localStorage
  and it will just the state so that the user is now null
  when the state is changed this will trigger another render() method call bringing
  the user back to the main login page

*server*
  this method will remove the react-context-jwt (token) from the localStorage
  and it will just the state so that the user is now null
  when the state is changed this will trigger another render() method call bringing
  the user back to the main login page


USER CAN STAY SIGNED IN IF THEY REFRESH PAGE
*client*
  on app.jsx the constructor method is executed first after a REFRESH
  then the render method is called, however, we will see a blank page
  as the state for user is null.
  then the componentDidMount method will be called
  during this method call we look into local storage to try and find
  a token being used and decode it
  if there isn't a token then user = null and the home page will render
  if there is a token it will be decoded and the state for user is changed
  to the decoded token and is authorizing is changed to false
